# -*- coding: utf-8 -*-
"""
bot1.py ‚Äî Telegram-–±–æ—Ç-—Ö–æ—Å—Ç–∏–Ω–≥ Python —Ñ–∞–π–ª–æ–≤
–ß–∞—Å—Ç—å 1: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –±–∞–∑–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞–º–æ—Ä–æ–∑–∫–∞
"""

import os
import sys
import time
import pysqlite3

# –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º sqlite3 –Ω–∞ pysqlite3
sys.modules['sqlite3'] = pysqlite3

import sqlite3
import zipfile
import threading
import ast
import urllib.parse
import traceback
import subprocess
import random
import string
import psutil
from typing import List, Set, Tuple
from telebot import TeleBot, types
from telebot.apihelper import ApiTelegramException

# ---------------- SETTINGS ----------------
TOKEN = "8277699763:AAGee0xepUOj0qiRF28XnFxXHVi06RMDpCk"
OWNER_ID = 7328238543

BASE_DIR = "/tmp"
DATA_DIR = "/tmp/data"
FILES_DIR = "/tmp/files"
QUARANTINE_DIR = "/tmp/quarantine"
DB_PATH = "/tmp/db.sqlite3"

os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(FILES_DIR, exist_ok=True)
os.makedirs(QUARANTINE_DIR, exist_ok=True)

PLANS = {
    "free": {"name": "ü™∂ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", "limit": 2, "ram_mb": 512, "cpu_percent": 5, "total_ram_mb": 800, "total_cpu_percent": 8},
    "premium": {"name": "üíé –ü—Ä–µ–º–∏—É–º", "limit": 20, "ram_mb": 1024, "cpu_percent": 15, "total_ram_mb": 2048, "total_cpu_percent": 25},
    "maximum": {"name": "üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π", "limit": 50, "ram_mb": 2048, "cpu_percent": 30, "total_ram_mb": 4096, "total_cpu_percent": 50},
}

# –û–ø–∞—Å–Ω—ã–µ –º–æ–¥—É–ª–∏ Python
FORBIDDEN_PYTHON_MODULES: Set[str] = {
    "ctypes", "pty", "resource", "socket", "multiprocessing", 
    "os", "sys", "subprocess", "shutil", "platform", "importlib"
}

FORBIDDEN_PYTHON_PATTERNS: Set[str] = {
    "exec(", "eval(", "os.system", "subprocess.popen", "base64.b64decode",
    "fork(", "shutil.rmtree", "pty.", "ctypes.", "__import__", "compile(",
    "open(", "input(", "breakpoint", "globals()", "locals()", "vars()",
    "dir()", "help()", "memoryview(", "bytearray(", "bytes(", "str.format(",
    "getattr(", "setattr(", "delattr(", "hasattr(", "isinstance(", "type("
}

# –û–ø–∞—Å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ JavaScript
FORBIDDEN_JS_PATTERNS: Set[str] = {
    "eval(", "Function(", "setTimeout(", "setInterval(", "setImmediate(",
    "exec(", "spawn(", "fork(", "execSync(", "spawnSync(", "forkSync(",
    "require('child_process')", "require('fs')", "require('os')",
    "require('process')", "require('vm')", "require('module')",
    "require('net')", "require('http')", "require('https')",
    "require('dns')", "require('tls')", "require('cluster')",
    "process.exit", "process.kill", "process.abort",
    "fs.readFile", "fs.writeFile", "fs.appendFile", "fs.unlink",
    "fs.rmdir", "fs.mkdir", "fs.rename", "fs.chmod", "fs.chown",
    "os.platform", "os.arch", "os.cpus", "os.totalmem", "os.freemem",
    "vm.runInThisContext", "vm.runInNewContext", "vm.createContext",
    "module._load", "require.main", "require.cache",
    "global.", "globalThis.", "window.", "document.", "XMLHttpRequest",
    "fetch(", "WebSocket", "localStorage", "sessionStorage",
    "indexedDB", "crypto.subtle", "crypto.getRandomValues",
    "import(", "import.meta", "export ", "module.exports",
    "__dirname", "__filename", "require.resolve",
    "Buffer(", "new Buffer", "Buffer.alloc", "Buffer.from",
    "atob(", "btoa(", "escape(", "unescape(",
    "console.trace", "console.debug", "console.profile",
    "debugger", "with (", "delete ", "void ", "typeof ", "instanceof "
}

# –û–ø–∞—Å–Ω—ã–µ npm –ø–∞–∫–µ—Ç—ã
DANGEROUS_NPM_PACKAGES = {
    'child_process', 'fs', 'os', 'process', 'vm', 'module', 'net', 
    'http', 'https', 'dns', 'tls', 'cluster', 'worker_threads',
    'readline', 'repl', 'v8', 'perf_hooks', 'async_hooks',
    'inspector', 'trace_events', 'wasi', 'worker',
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    'eslint-config-', 'eslint-plugin-', 'webpack-bundle-',
    'cross-env.js', 'jquery.js', 'babel-preset-', 'react-scripts-'
}

# –û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ scripts
DANGEROUS_NPM_SCRIPTS = {
    'rm -rf', 'rm -fr', 'rm -f', 'del ', 'remove ', 'format c:',
    'shutdown', 'reboot', 'init', 'kill', 'pkill', 'taskkill',
    'chmod', 'chown', 'mv ', 'cp ', 'dd ', 'cat ', 'echo ',
    'wget', 'curl', 'nc ', 'netcat', 'ssh', 'scp', 'sftp',
    'python ', 'python3 ', 'node ', 'npm ', 'yarn ',
    'eval', 'exec', 'child_process', 'process.exit',
    'require(', 'import(', 'fs.', 'os.', 'net.'
}

SUPPORTED_EXT = (".py", ".zip", ".js")

bot = TeleBot(TOKEN, parse_mode="HTML")

ADMIN_FLOW = {}    # {admin_id: {"mode":..., "data":{}}}
INSTALL_FLOW = {}  # {user_id: {"target_uid": int}}
RUNNING = {}       # {(uid,fname):{"proc":Popen,"started":int,"log":path}}
UPLOAD_FLOW = set() # {user_id}
PROMO_FLOW = set() # {user_id}

# ---------------- MONITORING ----------------
class ResourceMonitor:
    def __init__(self):
        self.process_stats = {}
        self.last_check = time.time()
    
    def get_user_total_usage(self, uid: int) -> Tuple[float, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –∏ RAM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        total_cpu = 0.0
        total_ram = 0.0
        
        for key, stats in self.process_stats.items():
            if key[0] == uid:  # –ø—Ä–æ—Ü–µ—Å—Å—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if time.time() - stats['last_update'] < 30:  # —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
                    total_cpu += stats['cpu']
                    total_ram += stats['ram_mb']
        
        return total_cpu, total_ram
    
    def update_process_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º"""
        current_time = time.time()
        if current_time - self.last_check < 5:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            return
        
        self.last_check = current_time
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º
        for key, info in list(RUNNING.items()):
            proc = info.get("proc")
            if proc and proc.poll() is None:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
                    ps_proc = psutil.Process(proc.pid)
                    cpu_percent = ps_proc.cpu_percent()
                    memory_info = ps_proc.memory_info()
                    memory_mb = memory_info.rss / 1024 / 1024
                    
                    self.process_stats[key] = {
                        'cpu': cpu_percent,
                        'ram_mb': memory_mb,
                        'last_update': current_time
                    }
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    # –ü—Ä–æ—Ü–µ—Å—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                    if key in self.process_stats:
                        del self.process_stats[key]
        
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        for key, stats in list(self.process_stats.items()):
            if time.time() - stats['last_update'] > 30:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ
                continue
                
            uid = key[0]
            user_ram_limit = plan_ram_mb(uid)
            user_cpu_limit = plan_cpu_percent(uid)
            user_total_ram_limit = plan_total_ram_mb(uid)
            user_total_cpu_limit = plan_total_cpu_percent(uid)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            total_cpu, total_ram = self.get_user_total_usage(uid)
            
            reason = None
            
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞
            if stats['ram_mb'] > user_ram_limit:
                reason = f"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç RAM: {stats['ram_mb']:.1f}MB/{user_ram_limit}MB"
            elif stats['cpu'] > user_cpu_limit:
                reason = f"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç CPU: {stats['cpu']:.1f}%/{user_cpu_limit}%"
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º–∞—Ä–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            elif total_ram > user_total_ram_limit:
                reason = f"–°—É–º–º–∞—Ä–Ω—ã–π –ª–∏–º–∏—Ç RAM: {total_ram:.1f}MB/{user_total_ram_limit}MB"
            elif total_cpu > user_total_cpu_limit:
                reason = f"–°—É–º–º–∞—Ä–Ω—ã–π –ª–∏–º–∏—Ç CPU: {total_cpu:.1f}%/{user_total_cpu_limit}%"
            
            if reason:
                # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                worst_process = self.find_worst_process(uid)
                if worst_process:
                    self.kill_process(worst_process, reason)
    
    def find_worst_process(self, uid: int):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–∞–º—ã–π —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_processes = []
        
        for key, stats in self.process_stats.items():
            if key[0] == uid and time.time() - stats['last_update'] < 30:
                # –°—á–∏—Ç–∞–µ–º "—Ç—è–∂–µ—Å—Ç—å" –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–∞–∫ —Å—É–º–º—É –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö CPU –∏ RAM
                cpu_weight = stats['cpu'] / plan_cpu_percent(uid)
                ram_weight = stats['ram_mb'] / plan_ram_mb(uid)
                total_weight = cpu_weight + ram_weight
                
                user_processes.append((key, total_weight, stats))
        
        if user_processes:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é "—Ç—è–∂–µ—Å—Ç–∏" –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π —Ç—è–∂–µ–ª—ã–π
            user_processes.sort(key=lambda x: x[1], reverse=True)
            return user_processes[0][0]
        
        return None
    
    def kill_process(self, key, reason):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã"""
        uid, fname = key
        try:
            proc = RUNNING[key]["proc"]
            proc.terminate()
            try:
                proc.wait(timeout=3)
            except Exception:
                proc.kill()
        except Exception:
            pass
        
        RUNNING.pop(key, None)
        if key in self.process_stats:
            del self.process_stats[key]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(uid, f"üõë –ü—Ä–æ—Ü–µ—Å—Å {fname} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {reason}")
    
    def get_system_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        total_users = 0
        active_scripts = 0
        total_cpu = 0.0
        total_ram = 0.0
        
        with db_connect() as conn:
            total_users = conn.execute("SELECT COUNT(*) FROM users").fetchone()[0]
        
        for key, stats in self.process_stats.items():
            if time.time() - stats['last_update'] < 30:  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                active_scripts += 1
                total_cpu += stats['cpu']
                total_ram += stats['ram_mb']
        
        return {
            'total_users': total_users,
            'active_scripts': active_scripts,
            'total_cpu_usage': total_cpu,
            'total_ram_usage_mb': total_ram
        }

# –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
resource_monitor = ResourceMonitor()

# ---------------- DB ----------------
def db_connect():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with db_connect() as conn:
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users(
                user_id INTEGER PRIMARY KEY,
                plan TEXT DEFAULT 'free',
                expiry INTEGER DEFAULT 0,
                banned INTEGER DEFAULT 0,
                frozen INTEGER DEFAULT 0,
                protection_disabled INTEGER DEFAULT 0
            )
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS files(
                user_id INTEGER,
                filename TEXT,
                imports TEXT DEFAULT '',
                PRIMARY KEY(user_id, filename)
            )
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS quarantine(
                qid INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                filename TEXT,
                imports TEXT,
                saved_path TEXT,
                status TEXT DEFAULT 'pending',
                created INTEGER
            )
        """)
        cur.execute("""
            CREATE TABLE IF NOT EXISTS promocodes(
                code TEXT PRIMARY KEY,
                plan TEXT NOT NULL,
                days INTEGER NOT NULL,
                max_activations INTEGER DEFAULT 1,
                activations_count INTEGER DEFAULT 0,
                used_by INTEGER DEFAULT NULL,
                used_at INTEGER DEFAULT NULL,
                created_at INTEGER NOT NULL,
                created_by INTEGER NOT NULL
            )
        """)
        conn.commit()

# ---------------- USERS ----------------
def ensure_user(uid: int):
    with db_connect() as conn:
        cur = conn.cursor()
        cur.execute("INSERT OR IGNORE INTO users(user_id) VALUES(?)", (uid,))
        conn.commit()

def get_user(uid: int):
    ensure_user(uid)
    with db_connect() as conn:
        cur = conn.cursor()
        return cur.execute("SELECT * FROM users WHERE user_id=?", (uid,)).fetchone()

def set_user_plan(uid: int, plan: str, days: int):
    ensure_user(uid)
    now = int(time.time())
    expiry = 0 if plan == "free" else now + max(1, days) * 86400
    with db_connect() as conn:
        cur = conn.cursor()
        cur.execute("UPDATE users SET plan=?, expiry=? WHERE user_id=?", (plan, expiry, uid))
        if plan != "free":
            cur.execute("UPDATE users SET frozen=0 WHERE user_id=?", (uid,))
        conn.commit()
    check_and_update_freeze(uid)

def add_days_to_subscription(uid: int, days: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–Ω–∏ –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    u = get_user(uid)
    if u["plan"] == "free":
        return False
    
    now = int(time.time())
    current_expiry = u["expiry"]
    if current_expiry < now:
        new_expiry = now + days * 86400
    else:
        new_expiry = current_expiry + days * 86400
    
    with db_connect() as conn:
        cur = conn.cursor()
        cur.execute("UPDATE users SET expiry=? WHERE user_id=?", (new_expiry, uid))
        conn.commit()
    
    return True

def reset_user_subscription(uid: int):
    """–û–±–Ω—É–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)"""
    ensure_user(uid)
    with db_connect() as conn:
        cur = conn.cursor()
        cur.execute("UPDATE users SET plan='free', expiry=0 WHERE user_id=?", (uid,))
        conn.commit()
    check_and_update_freeze(uid)

def get_subscription_days_left(uid: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    """
    u = get_user(uid)
    if u["plan"] == "free":
        return 0  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –∏–º–µ–µ—Ç —Å—Ä–æ–∫–∞
    
    expiry = u["expiry"]
    if expiry == 0:
        return 0
    
    now = int(time.time())
    if now >= expiry:
        return 0  # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
    
    days_left = (expiry - now) // 86400  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ –¥–Ω–∏
    return max(0, days_left)

def set_ban(uid: int, val: int):
    ensure_user(uid)
    with db_connect() as conn:
        conn.execute("UPDATE users SET banned=? WHERE user_id=?", (val, uid))
        conn.commit()

def set_protection_disabled(uid: int, val: int):
    ensure_user(uid)
    with db_connect() as conn:
        conn.execute("UPDATE users SET protection_disabled=? WHERE user_id=?", (val, uid))
        conn.commit()

def count_user_files(uid: int) -> int:
    with db_connect() as conn:
        r = conn.execute("SELECT COUNT(*) AS c FROM files WHERE user_id=?", (uid,)).fetchone()
        return int(r["c"]) if r else 0

# ---------------- PROMOCODES ----------------
def create_promocode(code: str, plan: str, days: int, created_by: int, max_activations: int = 1):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"""
    with db_connect() as conn:
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO promocodes(code, plan, days, max_activations, activations_count, created_at, created_by) VALUES(?,?,?,?,?,?,?)",
            (code, plan, days, max_activations, 0, int(time.time()), created_by)
        )
        conn.commit()

def get_promocode(code: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ"""
    with db_connect() as conn:
        return conn.execute("SELECT * FROM promocodes WHERE code=?", (code,)).fetchone()

def use_promocode(code: str, used_by: int):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"""
    with db_connect() as conn:
        cur = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
        cur.execute("SELECT * FROM promocodes WHERE code=? AND used_by=?", (code, used_by))
        if cur.fetchone():
            return False, "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π
        cur.execute("SELECT activations_count, max_activations FROM promocodes WHERE code=?", (code,))
        result = cur.fetchone()
        if result and result["activations_count"] >= result["max_activations"]:
            return False, "‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω"
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        cur.execute(
            "UPDATE promocodes SET used_by=?, used_at=?, activations_count = activations_count + 1 WHERE code=? AND used_by IS NULL",
            (used_by, int(time.time()), code)
        )
        conn.commit()
        return (cur.rowcount > 0, "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

def generate_promocode(length=8):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥"""
    chars = string.ascii_uppercase + string.digits
    return ''.join(random.choice(chars) for _ in range(length))

def can_apply_promocode(user_plan: str, promo_plan: str) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∫ —Ç–µ–∫—É—â–µ–º—É –ø–ª–∞–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–º–æ–∂–Ω–æ_–ª–∏_–ø—Ä–∏–º–µ–Ω–∏—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ_–æ–±_–æ—à–∏–±–∫–µ)
    """
    plan_hierarchy = {"free": 0, "premium": 1, "maximum": 2}
    
    user_level = plan_hierarchy.get(user_plan, 0)
    promo_level = plan_hierarchy.get(promo_plan, 0)
    
    if user_level > promo_level:
        return False, f"‚ùå –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω —Ç–∞—Ä–∏—Ñ {PLANS[user_plan]['name']}, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ —á–µ–º {PLANS[promo_plan]['name']}"
    elif user_level == promo_level:
        return True, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–æ–±–∞–≤–∏—Ç –¥–Ω–∏ –∫ –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É —Ç–∞—Ä–∏—Ñ—É {PLANS[user_plan]['name']}"
    else:
        return True, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø–æ–≤—ã—Å–∏—Ç –≤–∞—à —Ç–∞—Ä–∏—Ñ –¥–æ {PLANS[promo_plan]['name']}"

# ---------------- FILES ----------------
def user_dir(uid: int) -> str:
    path = os.path.join(FILES_DIR, str(uid))
    os.makedirs(path, exist_ok=True)
    return path

def quarantine_path(filename: str) -> str:
    ts = int(time.time())
    safe = f"{ts}_{urllib.parse.quote_plus(filename)}"
    return os.path.join(QUARANTINE_DIR, safe)

def list_files(uid: int) -> List[str]:
    with db_connect() as conn:
        rows = conn.execute("SELECT filename FROM files WHERE user_id=?", (uid,)).fetchall()
    return [r["filename"] for r in rows]

def add_file_record(uid: int, filename: str, imports: List[str]):
    with db_connect() as conn:
        conn.execute(
            "INSERT OR REPLACE INTO files(user_id, filename, imports) VALUES(?,?,?)",
            (uid, filename, ",".join(imports or []))
        )
        conn.commit()
    check_and_update_freeze(uid)

def remove_file_record(uid: int, filename: str):
    with db_connect() as conn:
        conn.execute("DELETE FROM files WHERE user_id=? AND filename=?", (uid, filename))
        conn.commit()
    check_and_update_freeze(uid)

# ---------------- QUARANTINE FUNCTIONS ----------------
def get_quarantine_file(qid: int):
    with db_connect() as conn:
        return conn.execute("SELECT * FROM quarantine WHERE qid=?", (qid,)).fetchone()

def approve_quarantine_file(qid: int):
    """–†–∞–∑—Ä–µ—à–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    q_file = get_quarantine_file(qid)
    if not q_file:
        return False
    
    uid = q_file["user_id"]
    filename = q_file["filename"]
    imports = q_file["imports"].split(",") if q_file["imports"] else []
    saved_path = q_file["saved_path"]
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –≤ –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_path = os.path.join(user_dir(uid), filename)
    try:
        os.rename(saved_path, user_path)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
        add_file_record(uid, filename, imports)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ
        with db_connect() as conn:
            conn.execute("UPDATE quarantine SET status='approved' WHERE qid=?", (qid,))
            conn.commit()
        
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞: {e}")
        return False

# ---------------- FREEZE ----------------
def plan_limit(uid: int) -> int:
    u = get_user(uid)
    return PLANS.get(u["plan"], PLANS["free"])["limit"]

def plan_ram_mb(uid: int) -> int:
    u = get_user(uid)
    return PLANS.get(u["plan"], PLANS["free"])["ram_mb"]

def plan_cpu_percent(uid: int) -> int:
    u = get_user(uid)
    return PLANS.get(u["plan"], PLANS["free"])["cpu_percent"]

def plan_total_ram_mb(uid: int) -> int:
    u = get_user(uid)
    return PLANS.get(u["plan"], PLANS["free"])["total_ram_mb"]

def plan_total_cpu_percent(uid: int) -> int:
    u = get_user(uid)
    return PLANS.get(u["plan"], PLANS["free"])["total_cpu_percent"]

def stop_all_for_user(uid: int):
    keys = [k for k in list(RUNNING.keys()) if k[0] == uid]
    for key in keys:
        try:
            proc = RUNNING[key]["proc"]
            proc.terminate()
            try:
                proc.wait(timeout=3)
            except Exception:
                proc.kill()
        except Exception:
            pass
        RUNNING.pop(key, None)

def check_and_update_freeze(uid: int):
    total = count_user_files(uid)
    limit = plan_limit(uid)
    frozen = 1 if total > limit else 0
    u = get_user(uid)
    prev = u["frozen"]
    if prev == frozen:
        return
    with db_connect() as conn:
        conn.execute("UPDATE users SET frozen=? WHERE user_id=?", (frozen, uid))
        conn.commit()
    if prev == 1 and frozen == 0:
        bot.send_message(uid, "‚úÖ –õ–∏–º–∏—Ç –≤ –Ω–æ—Ä–º–µ. –§–∞–π–ª—ã —Ä–∞–∑–º–æ—Ä–æ–∂–µ–Ω—ã.")
    elif prev == 0 and frozen == 1:
        stop_all_for_user(uid)
        bot.send_message(
            uid,
            "üßä –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–∞—Ä–∏—Ñ–∞. –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–º–æ—Ä–æ–∂–µ–Ω—ã, —Å–∫—Ä–∏–ø—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.\n"
            "–£–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É."
        )

# ---------------- SECURITY SCAN ----------------
def extract_python_imports(code: str) -> List[str]:
    """
    –ë—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç–∞—ë—Ç —Å–ø–∏—Å–æ–∫ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ Python-–∫–æ–¥–∞.
    """
    try:
        tree = ast.parse(code)
    except Exception:
        return []
    imports = set()
    for node in ast.walk(tree):
        if isinstance(node, ast.Import):
            for n in node.names:
                imports.add(n.name.split('.')[0])
        elif isinstance(node, ast.ImportFrom):
            if node.module:
                imports.add(node.module.split('.')[0])
    return list(imports)

def extract_js_requires(code: str) -> List[str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç require() –∏ import –∏–∑ JavaScript –∫–æ–¥–∞.
    """
    imports = set()
    lines = code.split('\n')
    for line in lines:
        line = line.strip()
        # –ü–æ–∏—Å–∫ require('module')
        if 'require(' in line:
            start = line.find('require(') + 8
            if start < len(line):
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                quote_char = None
                for i in range(start, len(line)):
                    if line[i] in ['"', "'", '`']:
                        quote_char = line[i]
                        module_start = i + 1
                        break
                
                if quote_char:
                    module_end = line.find(quote_char, module_start)
                    if module_end != -1:
                        module_name = line[module_start:module_end]
                        imports.add(module_name)
        
        # –ü–æ–∏—Å–∫ import from 'module'
        if 'import' in line and 'from' in line:
            parts = line.split('from')
            if len(parts) > 1:
                module_part = parts[1].strip()
                if module_part and module_part[0] in ['"', "'", '`']:
                    end_quote = module_part.find(module_part[0], 1)
                    if end_quote != -1:
                        module_name = module_part[1:end_quote]
                        imports.add(module_name)
        
        # –ü–æ–∏—Å–∫ import 'module'
        if 'import' in line and 'from' not in line:
            import_part = line.split('import')[1].strip()
            if import_part and import_part[0] in ['"', "'", '`']:
                end_quote = import_part.find(import_part[0], 1)
                if end_quote != -1:
                    module_name = import_part[1:end_quote]
                    imports.add(module_name)
    
    return list(imports)

def scan_package_json(package_content: str) -> Tuple[bool, List[str]]:
    """
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç package.json –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    """
    import json
    dangerous_found = []
    
    try:
        data = json.loads(package_content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º dependencies
        if 'dependencies' in data:
            for dep in data['dependencies']:
                if dep in DANGEROUS_NPM_PACKAGES:
                    dangerous_found.append(f"dependency: {dep}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º devDependencies
        if 'devDependencies' in data:
            for dep in data['devDependencies']:
                if dep in DANGEROUS_NPM_PACKAGES:
                    dangerous_found.append(f"devDependency: {dep}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º scripts –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if 'scripts' in data:
            for script_name, script_cmd in data['scripts'].items():
                script_cmd_lower = script_cmd.lower()
                for dangerous_cmd in DANGEROUS_NPM_SCRIPTS:
                    if dangerous_cmd in script_cmd_lower:
                        dangerous_found.append(f"script '{script_name}': {dangerous_cmd}")
        
        return (len(dangerous_found) > 0, dangerous_found)
    
    except json.JSONDecodeError:
        return (False, ["–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON"])
    except Exception as e:
        return (False, [f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"])

def scan_for_forbidden(code: str, file_extension: str) -> Tuple[bool, List[str]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    """
    bad_found = []
    
    if file_extension == '.py':
        imports = extract_python_imports(code)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π Python
        for imp in imports:
            if imp in FORBIDDEN_PYTHON_MODULES:
                bad_found.append(f"Python –º–æ–¥—É–ª—å: {imp}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π Python
        code_lower = code.lower()
        for pat in FORBIDDEN_PYTHON_PATTERNS:
            if pat in code_lower:
                bad_found.append(f"Python –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {pat}")
    
    elif file_extension == '.js':
        imports = extract_js_requires(code)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π JavaScript
        dangerous_js_modules = {
            'child_process', 'fs', 'os', 'process', 'vm', 'module', 
            'net', 'http', 'https', 'dns', 'tls', 'cluster'
        }
        for imp in imports:
            if imp in dangerous_js_modules:
                bad_found.append(f"JavaScript –º–æ–¥—É–ª—å: {imp}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π JavaScript
        for pat in FORBIDDEN_JS_PATTERNS:
            if pat in code:
                bad_found.append(f"JavaScript –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {pat}")
    
    return (len(bad_found) > 0, bad_found)

def add_quarantine(uid: int, filename: str, imports: List[str], saved_path: str) -> int:
    with db_connect() as conn:
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO quarantine(user_id, filename, imports, saved_path, created) VALUES(?,?,?,?,?)",
            (uid, filename, ",".join(imports), saved_path, int(time.time()))
        )
        conn.commit()
        return cur.lastrowid

# ---------------- FILE UPLOAD ----------------
@bot.message_handler(content_types=['document'])
def handle_upload(msg):
    uid = msg.from_user.id
    u = get_user(uid)
    if u["banned"]:
        return bot.reply_to(msg, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
    if u["frozen"]:
        return bot.reply_to(msg, "üßä –£ –≤–∞—Å –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    if not msg.document:
        return bot.reply_to(msg, "–û—Ç–ø—Ä–∞–≤—å .py, .js –∏–ª–∏ .zip —Ñ–∞–π–ª.")
    name = msg.document.file_name
    if not name.endswith(SUPPORTED_EXT):
        return bot.reply_to(msg, "‚ö†Ô∏è –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ .py, .js –∏–ª–∏ .zip —Ñ–∞–π–ª—ã.")

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_info = bot.get_file(msg.document.file_id)
    downloaded = bot.download_file(file_info.file_path)
    save_dir = user_dir(uid)
    save_path = os.path.join(save_dir, name)
    with open(save_path, "wb") as f:
        f.write(downloaded)

    # –µ—Å–ª–∏ –∞—Ä—Ö–∏–≤ ‚Äî —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    imported_all = []
    package_json_found = False
    package_json_dangerous = False
    package_json_warnings = []
    
    if name.endswith(".zip"):
        with zipfile.ZipFile(save_path, "r") as zip_ref:
            zip_ref.extractall(save_dir)
        os.remove(save_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ package.json
        package_json_path = os.path.join(save_dir, "package.json")
        if os.path.exists(package_json_path):
            package_json_found = True
            with open(package_json_path, "r", encoding="utf-8", errors="ignore") as f:
                package_content = f.read()
            
            dangerous, warnings = scan_package_json(package_content)
            if dangerous:
                package_json_dangerous = True
                package_json_warnings = warnings
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for inner in os.listdir(save_dir):
            if inner.endswith((".py", ".js")):
                p = os.path.join(save_dir, inner)
                with open(p, "r", encoding="utf-8", errors="ignore") as f:
                    code = f.read()
                
                file_ext = '.py' if inner.endswith('.py') else '.js'
                if file_ext == '.py':
                    imports = extract_python_imports(code)
                else:
                    imports = extract_js_requires(code)
                
                bad, bads = scan_for_forbidden(code, file_ext)
                imported_all.extend(imports)
                
                # –ï—Å–ª–∏ package.json –æ–ø–∞—Å–Ω—ã–π –∏–ª–∏ —Ñ–∞–π–ª –æ–ø–∞—Å–Ω—ã–π - –≤ –∫–∞—Ä–∞–Ω—Ç–∏–Ω
                if (bad or package_json_dangerous) and not u["protection_disabled"]:
                    qpath = quarantine_path(inner)
                    os.rename(p, qpath)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–∑ package.json –µ—Å–ª–∏ –µ—Å—Ç—å
                    all_warnings = bads + package_json_warnings
                    qid = add_quarantine(uid, inner, imports, qpath)
                    
                    warning_msg = f"üö´ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –≤ {inner}: {', '.join(all_warnings)}"
                    if package_json_dangerous:
                        warning_msg += f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–ø–∞—Å–Ω—ã–π package.json"
                    
                    bot.send_message(uid, warning_msg)
                    bot.send_message(OWNER_ID,
                        f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={uid}'>{uid}</a> "
                        f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∞—Å–Ω—ã–π –∫–æ–¥.\n"
                        f"<b>–§–∞–π–ª:</b> {inner}\n"
                        f"<b>–¢–∏–ø:</b> {file_ext}\n"
                        f"<b>Package.json:</b> {'–û–ü–ê–°–ù–´–ô' if package_json_dangerous else '–±–µ–∑–æ–ø–∞—Å–Ω—ã–π'}\n"
                        f"<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ:</b> {', '.join(all_warnings)}",
                        parse_mode='HTML',
                        reply_markup=types.InlineKeyboardMarkup(row_width=3).add(
                            types.InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"adm_ban:{uid}"),
                            types.InlineKeyboardButton("üö∑ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"adm_ignore:{qid}"),
                            types.InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"adm_approve:{qid}")
                        )
                    )
                    continue
                
                add_file_record(uid, inner, imports)
    else:
        with open(save_path, "r", encoding="utf-8", errors="ignore") as f:
            code = f.read()
        
        file_ext = '.py' if name.endswith('.py') else '.js'
        if file_ext == '.py':
            imports = extract_python_imports(code)
        else:
            imports = extract_js_requires(code)
        
        bad, bads = scan_for_forbidden(code, file_ext)
        if bad and not u["protection_disabled"]:
            qpath = quarantine_path(name)
            os.rename(save_path, qpath)
            qid = add_quarantine(uid, name, imports, qpath)
            bot.send_message(uid, f"üö´ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {', '.join(bads)}")
            bot.send_message(OWNER_ID,
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={uid}'>{uid}</a> "
                f"–ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–∞—Å–Ω—ã–π –∫–æ–¥.\n"
                f"<b>–§–∞–π–ª:</b> {name}\n"
                f"<b>–¢–∏–ø:</b> {file_ext}\n"
                f"<b>–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ:</b> {', '.join(bads)}",
                parse_mode='HTML',
                reply_markup=types.InlineKeyboardMarkup(row_width=3).add(
                    types.InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"adm_ban:{uid}"),
                    types.InlineKeyboardButton("üö∑ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"adm_ignore:{qid}"),
                    types.InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"adm_approve:{qid}")
                )
            )
            return
        add_file_record(uid, name, imports)
        imported_all = imports

    # –∏—Ç–æ–≥
    total = count_user_files(uid)
    limit = plan_limit(uid)
    if total > limit:
        check_and_update_freeze(uid)
        return

    success_msg = f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: <b>{name}</b>\nüì¶ –ò–º–ø–æ—Ä—Ç—ã: <code>{', '.join(imported_all)}</code>"
    if package_json_found:
        if package_json_dangerous:
            success_msg += f"\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> package.json —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∞—Å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!"
        else:
            success_msg += f"\nüìã package.json –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω"
    
    bot.send_message(uid, success_msg, parse_mode="HTML")

# ---------------- UTILS ----------------
def safe_edit_text(func, text, chat_id, msg_id, **kw):
    try:
        func(text, chat_id, msg_id, **kw)
    except ApiTelegramException as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise

def running_status(uid: int, fname: str) -> Tuple[str, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (emoji, —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞)
    """
    key = (uid, fname)
    if key in RUNNING:
        proc = RUNNING[key]["proc"]
        if proc.poll() is None:
            started = RUNNING[key]["started"]
            diff = int(time.time() - started)
            mins = round(diff / 60, 1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            resource_info = ""
            if key in resource_monitor.process_stats:
                stats = resource_monitor.process_stats[key]
                resource_info = f" (CPU: {stats['cpu']:.1f}%, RAM: {stats['ram_mb']:.1f}MB)"
            
            return "üü¢", f"–†–∞–±–æ—Ç–∞–µ—Ç ({mins} –º–∏–Ω.){resource_info}"
    return "üî¥", "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

# ---------------- FILE CONTROL ----------------
def start_script_for_user(uid: int, fname: str):
    """–ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    # –ü–†–û–í–ï–†–ö–ê –ó–ê–ú–û–†–û–ó–ö–ò
    u = get_user(uid)
    if u["frozen"]:
        return False, "üßä –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: –∑–∞–ø—É—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    
    path = os.path.join(user_dir(uid), fname)
    if not os.path.exists(path):
        return False, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
    if (uid, fname) in RUNNING and RUNNING[(uid, fname)]["proc"].poll() is None:
        return False, "‚ö†Ô∏è –£–∂–µ –∑–∞–ø—É—â–µ–Ω."
    
    log_path = path + ".log"
    try:
        if fname.endswith('.py'):
            proc = subprocess.Popen(
                [sys.executable, path],
                stdout=open(log_path, "a", encoding="utf-8"),
                stderr=subprocess.STDOUT,
            )
        elif fname.endswith('.js'):
            proc = subprocess.Popen(
                ['node', path],
                stdout=open(log_path, "a", encoding="utf-8"),
                stderr=subprocess.STDOUT,
            )
        else:
            return False, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞."
        
        RUNNING[(uid, fname)] = {"proc": proc, "started": int(time.time()), "log": log_path}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_monitor.update_process_stats()
        
        return True, "üü° –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è..."
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}"

def stop_script_for_user(uid: int, fname: str):
    key = (uid, fname)
    if key not in RUNNING:
        return False, "‚ö†Ô∏è –ù–µ –∑–∞–ø—É—â–µ–Ω."
    proc = RUNNING[key]["proc"]
    try:
        proc.terminate()
        proc.wait(timeout=3)
    except Exception:
        try:
            proc.kill()
        except Exception:
            pass
    RUNNING.pop(key, None)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    if key in resource_monitor.process_stats:
        del resource_monitor.process_stats[key]
    
    return True, "üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."

# ---------------- FILE MENU ----------------
def file_actions_kb(uid: int, fname: str):
    kb = types.InlineKeyboardMarkup(row_width=3)
    key = (uid, fname)
    running = key in RUNNING and RUNNING[key]["proc"].poll() is None
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ó–∞–ø—É—Å–∫/–û—Å—Ç–∞–Ω–æ–≤–∫–∞ + –û–±–Ω–æ–≤–∏—Ç—å
    if running:
        kb.add(
            types.InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data=f"stop:{fname}"),
            types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh:{fname}")
        )
    else:
        kb.add(
            types.InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"run:{fname}"),
            types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh:{fname}")
        )
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –õ–æ–≥–∏ + –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É
    kb.add(
        types.InlineKeyboardButton("üìú –õ–æ–≥–∏", callback_data=f"log:{fname}"),
        types.InlineKeyboardButton("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"install:{fname}")
    )
    
    # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞: –£–¥–∞–ª–∏—Ç—å + –ù–∞–∑–∞–¥
    kb.add(
        types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{fname}"),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    )
    
    return kb

def file_menu_text_kb(uid: int, fname: str):
    emoji, status = running_status(uid, fname)
    file_type = "üêç Python" if fname.endswith('.py') else "üìú JavaScript" if fname.endswith('.js') else "üìÑ –§–∞–π–ª"
    text = f"{file_type} <b>{fname}</b>\n{emoji} {status}"
    kb = file_actions_kb(uid, fname)
    return text, kb

# ---------------- FILE LIST ----------------
def files_kb(uid: int):
    kb = types.InlineKeyboardMarkup()
    u = get_user(uid)
    frozen = u["frozen"]
    files = list_files(uid)
    if not files:
        kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
        return kb
    for f in files:
        key = (uid, f)
        running = key in RUNNING and RUNNING[key]["proc"].poll() is None
        if frozen:
            prefix = "üßä "
        else:
            prefix = "üü¢ " if running else "‚ö™ "
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        file_icon = "üêç " if f.endswith('.py') else "üìú " if f.endswith('.js') else "üìÑ "
        kb.add(types.InlineKeyboardButton(f"{prefix}{file_icon}{f}", callback_data=f"file:{urllib.parse.quote_plus(f)}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    return kb

# ---------------- CALLBACKS ----------------
@bot.callback_query_handler(func=lambda c: c.data.startswith("file:"))
def open_file_menu(c):
    uid = c.from_user.id
    fname = urllib.parse.unquote_plus(c.data.split(":", 1)[1])
    text, kb = file_menu_text_kb(uid, fname)
    bot.edit_message_text(text, c.message.chat.id, c.message.id, reply_markup=kb, parse_mode="HTML")

@bot.callback_query_handler(func=lambda c: c.data.startswith(("run:", "stop:", "refresh:", "log:", "del:", "install:")) )
def h_file_actions(c):
    cmd, raw = c.data.split(":", 1)
    fname = urllib.parse.unquote_plus(raw)
    uid = c.from_user.id

    # –ü–†–û–í–ï–†–ö–ê –ó–ê–ú–û–†–û–ó–ö–ò –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú –ò –£–°–¢–ê–ù–û–í–ö–û–ô
    u = get_user(uid)
    if u["frozen"] and cmd in ["run", "install"]:
        return bot.answer_callback_query(c.id, "üßä –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)

    def redraw():
        text, kb = file_menu_text_kb(uid, fname)
        safe_edit_text(bot.edit_message_text, text, c.message.chat.id, c.message.id, reply_markup=kb, parse_mode="HTML")

    if cmd == "run":
        safe_edit_text(bot.edit_message_text, f"üìÑ <b>{fname}</b>\nüü° –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è‚Ä¶", c.message.chat.id, c.message.id, reply_markup=file_actions_kb(uid, fname))
        ok, txt = start_script_for_user(uid, fname)
        try: bot.answer_callback_query(c.id, txt, show_alert=False)
        except: pass
        redraw()
        return
    if cmd == "stop":
        ok, txt = stop_script_for_user(uid, fname)
        bot.answer_callback_query(c.id, txt, show_alert=not ok)
        redraw()
        return
    if cmd == "refresh":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        resource_monitor.update_process_stats()
        bot.answer_callback_query(c.id, "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ", show_alert=False)
        redraw()
        return
    if cmd == "log":
        log_path = os.path.join(user_dir(uid), fname + ".log")
        try:
            if os.path.exists(log_path):
                with open(log_path, "r", encoding="utf-8", errors="ignore") as f:
                    lines = f.readlines()
                    text = "".join(lines[-500:]) if lines else "# –õ–æ–≥–æ–≤ –Ω–µ—Ç"
                
                if len(text) > 4000:
                    text = text[-4000:]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
                language = "python" if fname.endswith('.py') else "javascript" if fname.endswith('.js') else "text"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –∫–∞–∫ –∫–æ–¥
                if text.strip():
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if len(text) > 4000:
                        parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
                        for i, part in enumerate(parts):
                            bot.send_message(c.message.chat.id, f"```{language}\n{part}\n```", parse_mode="Markdown")
                            if i == 0:  # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
                                time.sleep(0.5)
                    else:
                        bot.send_message(c.message.chat.id, f"```{language}\n{text}\n```", parse_mode="Markdown")
                else:
                    bot.send_message(c.message.chat.id, f"```{language}\n# –õ–æ–≥–æ–≤ –Ω–µ—Ç\n```", parse_mode="Markdown")
            else:
                bot.send_message(c.message.chat.id, "```text\n# –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω\n```", parse_mode="Markdown")
        except Exception as e:
            error_msg = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏: {str(e)}"
            bot.answer_callback_query(c.id, error_msg, show_alert=True)
        return
    if cmd == "del":
        path = os.path.join(user_dir(uid), fname)
        if (uid, fname) in RUNNING:
            stop_script_for_user(uid, fname)
        if os.path.exists(path):
            os.remove(path)
        remove_file_record(uid, fname)
        safe_edit_text(bot.edit_message_text, "üìÅ –¢–≤–æ–∏ —Ñ–∞–π–ª—ã:", c.message.chat.id, c.message.id, reply_markup=files_kb(uid))
        bot.answer_callback_query(c.id, "üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ.", show_alert=False)
        return
    if cmd == "install":
        install_text = (
            "‚öôÔ∏è <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫</b>\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:\n"
            "‚Ä¢ <code>–Ω–∞–∑–≤–∞–Ω–∏–µ</code> - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ pip (Python)\n"
            "‚Ä¢ <code>npm –Ω–∞–∑–≤–∞–Ω–∏–µ</code> - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ npm (JavaScript)\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>requests</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç Python –±–∏–±–ª–∏–æ—Ç–µ–∫—É\n"
            "<code>npm express</code> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç npm –ø–∞–∫–µ—Ç\n\n"
            "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:"
        )
        bot.send_message(c.message.chat.id, install_text, parse_mode="HTML")
        INSTALL_FLOW[uid] = {"target_uid": uid}
        return

# ---------------- INSTALL ----------------
@bot.message_handler(func=lambda m: m.from_user.id in INSTALL_FLOW)
def handle_install(msg):
    uid = msg.from_user.id
    name = msg.text.strip()
    if "&" in name or ";" in name:
        bot.reply_to(msg, "‚ùå –°–∏–º–≤–æ–ª—ã `&` –∏ `;` –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")
        INSTALL_FLOW.pop(uid, None)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (pip –∏–ª–∏ npm)
    if name.startswith("npm "):
        # npm —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        package_name = name[4:].strip()
        if "&" in package_name or ";" in package_name:
            bot.reply_to(msg, "‚ùå –°–∏–º–≤–æ–ª—ã `&` –∏ `;` –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")
            INSTALL_FLOW.pop(uid, None)
            return
        
        bot.reply_to(msg, f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é npm –ø–∞–∫–µ—Ç: {package_name} ...")
        try:
            proc = subprocess.run(['npm', 'install', package_name], capture_output=True, text=True)
            if proc.returncode == 0:
                bot.reply_to(msg, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω npm –ø–∞–∫–µ—Ç: {package_name}")
            else:
                bot.reply_to(msg, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ npm:\n<pre>{proc.stderr[:4000]}</pre>", parse_mode="HTML")
        except Exception as e:
            bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ npm: {e}")
    else:
        # pip —É—Å—Ç–∞–Ω–æ–≤–∫–∞
        bot.reply_to(msg, f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é: {name} ...")
        try:
            proc = subprocess.run([sys.executable, "-m", "pip", "install", name], capture_output=True, text=True)
            if proc.returncode == 0:
                bot.reply_to(msg, f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {name}")
            else:
                bot.reply_to(msg, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:\n<pre>{proc.stderr[:4000]}</pre>", parse_mode="HTML")
        except Exception as e:
            bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    INSTALL_FLOW.pop(uid, None)

# ---------------- ADMIN PANEL ----------------
def admin_kb():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üíé –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="adm_plan"),
        types.InlineKeyboardButton("üõ°Ô∏è –í–∫–ª/–í—ã–∫–ª –∑–∞—â–∏—Ç—É", callback_data="adm_protect"),
    )
    kb.add(
        types.InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="adm_banuser"),
        types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="adm_unbanuser")
    )
    kb.add(
        types.InlineKeyboardButton("üîÑ –û–±–Ω—É–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="adm_resetsub"),
        types.InlineKeyboardButton("üé´ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="adm_promo")
    )
    kb.add(
        types.InlineKeyboardButton("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="adm_monitor")
    )
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    return kb

@bot.callback_query_handler(func=lambda c: c.data == "adm_plan")
def adm_plan_cb(c):
    if c.from_user.id != OWNER_ID:
        return
    ADMIN_FLOW[c.from_user.id] = {"mode": "plan_user"}
    bot.send_message(c.message.chat.id, "üíé –í–≤–µ–¥–∏ user_id:")

@bot.callback_query_handler(func=lambda c: c.data == "adm_protect")
def adm_protect_cb(c):
    if c.from_user.id != OWNER_ID:
        return
    ADMIN_FLOW[c.from_user.id] = {"mode": "toggle_protect"}
    bot.send_message(c.message.chat.id, "üõ°Ô∏è –í–≤–µ–¥–∏ user_id –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã:")

@bot.callback_query_handler(func=lambda c: c.data == "adm_banuser")
def adm_banuser_cb(c):
    if c.from_user.id != OWNER_ID:
        return
    ADMIN_FLOW[c.from_user.id] = {"mode": "ban_user"}
    bot.send_message(c.message.chat.id, "üö´ –í–≤–µ–¥–∏ user_id –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")

@bot.callback_query_handler(func=lambda c: c.data == "adm_unbanuser")
def adm_unbanuser_cb(c):
    if c.from_user.id != OWNER_ID:
        return
    ADMIN_FLOW[c.from_user.id] = {"mode": "unban_user"}
    bot.send_message(c.message.chat.id, "‚úÖ –í–≤–µ–¥–∏ user_id –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")

@bot.callback_query_handler(func=lambda c: c.data == "adm_resetsub")
def adm_resetsub_cb(c):
    if c.from_user.id != OWNER_ID:
        return
    ADMIN_FLOW[c.from_user.id] = {"mode": "reset_sub"}
    bot.send_message(c.message.chat.id, "üîÑ –í–≤–µ–¥–∏ user_id –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:")

@bot.callback_query_handler(func=lambda c: c.data == "adm_promo")
def adm_promo_cb(c):
    if c.from_user.id != OWNER_ID:
        return
    ADMIN_FLOW[c.from_user.id] = {"mode": "promo_plan"}
    bot.send_message(c.message.chat.id, "üé´ –í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=promo_plan_kb())

@bot.callback_query_handler(func=lambda c: c.data == "adm_monitor")
def adm_monitor_cb(c):
    if c.from_user.id != OWNER_ID:
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    resource_monitor.update_process_stats()
    stats = resource_monitor.get_system_stats()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö
    active_processes = []
    for key, proc_info in RUNNING.items():
        uid, fname = key
        proc = proc_info["proc"]
        if proc.poll() is None:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            resource_stats = resource_monitor.process_stats.get(key, {})
            cpu_usage = resource_stats.get('cpu', 0)
            ram_usage = resource_stats.get('ram_mb', 0)
            
            active_processes.append({
                'user_id': uid,
                'filename': fname,
                'cpu': cpu_usage,
                'ram': ram_usage
            })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    monitor_text = (
        "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{stats['total_users']}</code>\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤: <code>{stats['active_scripts']}</code>\n"
        f"‚öôÔ∏è –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: <code>{stats['total_cpu_usage']:.1f}%</code>\n"
        f"üíæ –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: <code>{stats['total_ram_usage_mb']:.1f} MB</code>\n\n"
    )
    
    if active_processes:
        monitor_text += "<b>–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:</b>\n"
        for proc in active_processes:
            monitor_text += (
                f"‚Ä¢ <code>{proc['filename']}</code> (User: {proc['user_id']}) - "
                f"CPU: {proc['cpu']:.1f}%, RAM: {proc['ram']:.1f}MB\n"
            )
    else:
        monitor_text += "üî¥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
    
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="adm_monitor"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))
    
    bot.edit_message_text(monitor_text, c.message.chat.id, c.message.id, reply_markup=kb, parse_mode="HTML")

def promo_plan_kb():
    kb = types.InlineKeyboardMarkup(row_width=3)
    for k, v in PLANS.items():
        kb.add(types.InlineKeyboardButton(v["name"], callback_data=f"promo_plan_{k}"))
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin"))
    return kb

@bot.callback_query_handler(func=lambda c: c.data.startswith("promo_plan_"))
def promo_plan_select(c):
    if c.from_user.id != OWNER_ID:
        return
    plan = c.data.split("_", 2)[2]
    ADMIN_FLOW[c.from_user.id] = {"mode": "promo_days", "data": {"plan": plan}}
    bot.send_message(c.message.chat.id, f"–í—ã–±—Ä–∞–Ω –ø–ª–∞–Ω: {PLANS[plan]['name']}\n–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:")

@bot.message_handler(func=lambda m: m.from_user.id in ADMIN_FLOW and m.from_user.id == OWNER_ID)
def admin_flow_handler(m):
    flow = ADMIN_FLOW[m.from_user.id]
    mode = flow.get("mode")
    
    if mode == "plan_user":
        try:
            target = int(m.text.strip())
            flow["data"] = {"target": target}
            flow["mode"] = "plan_select"
            ADMIN_FLOW[m.from_user.id] = flow
            
            kb = types.InlineKeyboardMarkup(row_width=3)
            for k, v in PLANS.items():
                kb.add(types.InlineKeyboardButton(v["name"], callback_data=f"plan_{k}"))
            bot.reply_to(m, f"–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –¥–ª—è {target}:", reply_markup=kb)
        except ValueError:
            bot.reply_to(m, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            
    elif mode == "plan_days":
        try:
            days = int(m.text.strip())
            target = flow["data"]["target"]
            plan = flow["data"]["plan"]
            
            set_user_plan(target, plan, days)
            ADMIN_FLOW.pop(m.from_user.id, None)
            
            bot.reply_to(m, f"‚úÖ –í—ã–¥–∞–Ω –ø–ª–∞–Ω {PLANS[plan]['name']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target} –Ω–∞ {days} –¥–Ω.")
            if target != OWNER_ID:
                bot.send_message(target, f"üíé –í–∞–º –≤—ã–¥–∞–Ω –ø–ª–∞–Ω {PLANS[plan]['name']} –Ω–∞ {days} –¥–Ω.")
        except ValueError:
            bot.reply_to(m, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            
    elif mode == "toggle_protect":
        try:
            target = int(m.text.strip())
            u = get_user(target)
            current = u["protection_disabled"]
            new_val = 0 if current else 1
            set_protection_disabled(target, new_val)
            
            status = "‚ùå –í–´–ö–õ–Æ–ß–ï–ù–ê" if new_val else "‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê"
            bot.reply_to(m, f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} {status}")
            ADMIN_FLOW.pop(m.from_user.id, None)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if target != OWNER_ID:
                bot.send_message(target, f"üõ°Ô∏è –í–∞—à–∞ –∑–∞—â–∏—Ç–∞ {status.lower()}")
        except ValueError:
            bot.reply_to(m, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            
    elif mode == "ban_user":
        try:
            target = int(m.text.strip())
            set_ban(target, 1)
            bot.reply_to(m, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            ADMIN_FLOW.pop(m.from_user.id, None)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if target != OWNER_ID:
                bot.send_message(target, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        except ValueError:
            bot.reply_to(m, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            
    elif mode == "unban_user":
        try:
            target = int(m.text.strip())
            set_ban(target, 0)
            bot.reply_to(m, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            ADMIN_FLOW.pop(m.from_user.id, None)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if target != OWNER_ID:
                bot.send_message(target, "‚úÖ –í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        except ValueError:
            bot.reply_to(m, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            
    elif mode == "reset_sub":
        try:
            target = int(m.text.strip())
            reset_user_subscription(target)
            bot.reply_to(m, f"üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} –æ–±–Ω—É–ª–µ–Ω–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)")
            ADMIN_FLOW.pop(m.from_user.id, None)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if target != OWNER_ID:
                bot.send_message(target, "üîÑ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ–±–Ω—É–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.")
        except ValueError:
            bot.reply_to(m, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            
    elif mode == "promo_days":
        try:
            days = int(m.text.strip())
            plan = flow["data"]["plan"]
            flow["mode"] = "promo_activations"
            flow["data"]["days"] = days
            ADMIN_FLOW[m.from_user.id] = flow
            
            bot.reply_to(m, f"–í—ã–±—Ä–∞–Ω –ø–ª–∞–Ω: {PLANS[plan]['name']} –Ω–∞ {days} –¥–Ω–µ–π\n\n–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1):")
        except ValueError:
            bot.reply_to(m, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            
    elif mode == "promo_activations":
        try:
            max_activations = int(m.text.strip()) if m.text.strip() else 1
            plan = flow["data"]["plan"]
            days = flow["data"]["days"]
            flow["mode"] = "promo_name"
            flow["data"]["max_activations"] = max_activations
            ADMIN_FLOW[m.from_user.id] = flow
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
            promo_code = generate_promocode()
            bot.reply_to(m, 
                f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è {PLANS[plan]['name']} –Ω–∞ {days} –¥–Ω–µ–π\n"
                f"üë• –ú–∞–∫—Å. –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {max_activations}\n\n"
                f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: <code>{promo_code}</code>\n\n"
                f"–í–≤–µ–¥–∏ —Å–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ", 
                parse_mode="HTML"
            )
        except ValueError:
            bot.reply_to(m, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            
    elif mode == "promo_name":
        promo_name = m.text.strip()
        if promo_name.lower() == '–≥–æ—Ç–æ–≤–æ':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
            promo_code = generate_promocode()
        else:
            promo_code = promo_name.upper()
        
        plan = flow["data"]["plan"]
        days = flow["data"]["days"]
        max_activations = flow["data"]["max_activations"]
        
        create_promocode(promo_code, plan, days, m.from_user.id, max_activations)
        ADMIN_FLOW.pop(m.from_user.id, None)
        
        bot.reply_to(m, 
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üé´ <code>{promo_code}</code>\n"
            f"üìã –ü–ª–∞–Ω: {PLANS[plan]['name']}\n"
            f"‚è∞ –î–Ω–µ–π: {days}\n"
            f"üë• –ú–∞–∫—Å. –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {max_activations}", 
            parse_mode="HTML"
        )

@bot.callback_query_handler(func=lambda c: c.data.startswith("plan_"))
def select_plan_cb(c):
    if c.from_user.id != OWNER_ID:
        return
    plan = c.data.split("_", 1)[1]
    flow = ADMIN_FLOW.get(c.from_user.id, {})
    data = flow.get("data", {})
    data["plan"] = plan
    flow["mode"] = "plan_days"
    flow["data"] = data
    ADMIN_FLOW[c.from_user.id] = flow
    bot.send_message(c.message.chat.id, f"–í—ã–±—Ä–∞–Ω –ø–ª–∞–Ω: {PLANS[plan]['name']}\n–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")

@bot.callback_query_handler(func=lambda c: c.data.startswith("adm_ban:"))
def adm_ban_callback(c):
    if c.from_user.id != OWNER_ID:
        return
    uid = int(c.data.split(":")[1])
    set_ban(uid, 1)
    bot.answer_callback_query(c.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    bot.edit_message_reply_markup(c.message.chat.id, c.message.id, reply_markup=None)
    bot.send_message(uid, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

@bot.callback_query_handler(func=lambda c: c.data.startswith("adm_ignore:"))
def adm_ignore_callback(c):
    if c.from_user.id != OWNER_ID:
        return
    qid = int(c.data.split(":")[1])
    with db_connect() as conn:
        conn.execute("UPDATE quarantine SET status='ignored' WHERE qid=?", (qid,))
        conn.commit()
    bot.answer_callback_query(c.id, "–§–∞–π–ª –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω")
    bot.edit_message_reply_markup(c.message.chat.id, c.message.id, reply_markup=None)

@bot.callback_query_handler(func=lambda c: c.data.startswith("adm_approve:"))
def adm_approve_callback(c):
    if c.from_user.id != OWNER_ID:
        return
    qid = int(c.data.split(":")[1])
    
    if approve_quarantine_file(qid):
        q_file = get_quarantine_file(qid)
        if q_file:
            uid = q_file["user_id"]
            filename = q_file["filename"]
            
            bot.answer_callback_query(c.id, f"–§–∞–π–ª {filename} —Ä–∞–∑—Ä–µ—à–µ–Ω")
            bot.edit_message_reply_markup(c.message.chat.id, c.message.id, reply_markup=None)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(uid, f"‚úÖ –í–∞—à —Ñ–∞–π–ª <b>{filename}</b> –±—ã–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥!", parse_mode="HTML")
    else:
        bot.answer_callback_query(c.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)

# ---------------- PROMOCODE HANDLERS ----------------
@bot.callback_query_handler(func=lambda c: c.data == "promo")
def enter_promo(c):
    uid = c.from_user.id
    PROMO_FLOW.add(uid)
    
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back"))
    
    bot.send_message(c.message.chat.id, "üé´ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=kb)

@bot.message_handler(func=lambda m: m.from_user.id in PROMO_FLOW)
def handle_promo(msg):
    uid = msg.from_user.id
    promo_code = msg.text.strip().upper()
    
    promo = get_promocode(promo_code)
    if not promo:
        bot.reply_to(msg, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        PROMO_FLOW.discard(uid)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    if promo["used_by"] == uid:
        bot.reply_to(msg, "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
        PROMO_FLOW.discard(uid)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    if promo["activations_count"] >= promo["max_activations"]:
        bot.reply_to(msg, "‚ùå –õ–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω.")
        PROMO_FLOW.discard(uid)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user(uid)
    current_plan = user["plan"]
    promo_plan = promo["plan"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
    can_apply, message = can_apply_promocode(current_plan, promo_plan)
    
    if not can_apply:
        bot.reply_to(msg, message)
        PROMO_FLOW.discard(uid)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
    bot.reply_to(msg, f"{message}\n\n–ê–∫—Ç–∏–≤–∏—Ä—É—é –ø—Ä–æ–º–æ–∫–æ–¥...")
    
    success, result_message = use_promocode(promo_code, uid)
    if success:
        if current_plan == promo_plan:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
            add_days_to_subscription(uid, promo["days"])
            new_days = get_subscription_days_left(uid)
            
            bot.reply_to(msg, 
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"üé´ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–Ω–µ–π: {promo['days']}\n"
                f"üìã –¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: {PLANS[promo_plan]['name']}\n"
                f"‚è∞ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {new_days} –¥–Ω–µ–π\n"
                f"üìä –ê–∫—Ç–∏–≤–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {promo['activations_count'] + 1}/{promo['max_activations']}"
            )
        else:
            # –ü–æ–≤—ã—à–∞–µ–º —Ç–∞—Ä–∏—Ñ
            set_user_plan(uid, promo_plan, promo["days"])
            
            bot.reply_to(msg, 
                f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                f"üé´ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {PLANS[promo_plan]['name']}\n"
                f"‚è∞ –ù–∞ {promo['days']} –¥–Ω–µ–π\n"
                f"üìä –ê–∫—Ç–∏–≤–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {promo['activations_count'] + 1}/{promo['max_activations']}"
            )
        
        PROMO_FLOW.discard(uid)
    else:
        bot.reply_to(msg, result_message)
        PROMO_FLOW.discard(uid)

# ---------------- MAIN MENU & NAVIGATION ----------------
def main_menu_kb(uid: int):
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload"),
        types.InlineKeyboardButton("üìÅ –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="myfiles")
    )
    kb.add(
        types.InlineKeyboardButton("‚ö° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å", callback_data="speed"),
        types.InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")
    )
    kb.add(
        types.InlineKeyboardButton("üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")
    )
    if uid == OWNER_ID:
        kb.add(types.InlineKeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin"))
    return kb

@bot.message_handler(commands=['start'])
def on_start(msg):
    uid = msg.from_user.id
    ensure_user(uid)
    u = get_user(uid)
    plan = u["plan"]
    lim = plan_limit(uid)
    days_left = get_subscription_days_left(uid)
    ram_mb = plan_ram_mb(uid)
    cpu_percent = plan_cpu_percent(uid)
    total_ram_mb = plan_total_ram_mb(uid)
    total_cpu_percent = plan_total_cpu_percent(uid)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
    if plan == "free":
        subscription_info = "ü™∂ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω (–±–µ–∑ —Å—Ä–æ–∫–∞)"
    else:
        if days_left > 0:
            subscription_info = f"{PLANS[plan]['name']} ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω."
        else:
            subscription_info = f"{PLANS[plan]['name']} ‚Ä¢ ‚ùå –ò–°–¢–ï–ö–õ–ê"
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
            if u["plan"] != "free":
                set_user_plan(uid, "free", 0)

    text = (f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
            f"üìã –ü–ª–∞–Ω: {subscription_info}\n"
            f"üìÅ –õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤: {lim}\n"
            f"üíæ RAM –Ω–∞ —Ñ–∞–π–ª: {ram_mb} MB | –°—É–º–º–∞—Ä–Ω–æ: {total_ram_mb} MB\n"
            f"‚öôÔ∏è CPU –Ω–∞ —Ñ–∞–π–ª: {cpu_percent}% | –°—É–º–º–∞—Ä–Ω–æ: {total_cpu_percent}%\n"
            f"üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: Python üêç, JavaScript üìú")
    
    bot.send_message(uid, text, reply_markup=main_menu_kb(uid), parse_mode="HTML")

@bot.callback_query_handler(func=lambda c: c.data == "back")
def back_to_main(c):
    uid = c.from_user.id
    u = get_user(uid)
    plan = u["plan"]
    lim = plan_limit(uid)
    days_left = get_subscription_days_left(uid)
    ram_mb = plan_ram_mb(uid)
    cpu_percent = plan_cpu_percent(uid)
    total_ram_mb = plan_total_ram_mb(uid)
    total_cpu_percent = plan_total_cpu_percent(uid)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
    if plan == "free":
        subscription_info = "ü™∂ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω (–±–µ–∑ —Å—Ä–æ–∫–∞)"
    else:
        if days_left > 0:
            subscription_info = f"{PLANS[plan]['name']} ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω."
        else:
            subscription_info = f"{PLANS[plan]['name']} ‚Ä¢ ‚ùå –ò–°–¢–ï–ö–õ–ê"
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
            if u["plan"] != "free":
                set_user_plan(uid, "free", 0)

    text = (f"üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n"
            f"üìã –ü–ª–∞–Ω: {subscription_info}\n"
            f"üìÅ –õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤: {lim}\n"
            f"üíæ RAM –Ω–∞ —Ñ–∞–π–ª: {ram_mb} MB | –°—É–º–º–∞—Ä–Ω–æ: {total_ram_mb} MB\n"
            f"‚öôÔ∏è CPU –Ω–∞ —Ñ–∞–π–ª: {cpu_percent}% | –°—É–º–º–∞—Ä–Ω–æ: {total_cpu_percent}%")
    
    safe_edit_text(bot.edit_message_text, text, c.message.chat.id, c.message.id, 
                   reply_markup=main_menu_kb(uid), parse_mode="HTML")

@bot.callback_query_handler(func=lambda c: c.data == "admin")
def open_admin(c):
    if c.from_user.id != OWNER_ID:
        return
    bot.edit_message_text("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", c.message.chat.id, c.message.id, reply_markup=admin_kb())

@bot.callback_query_handler(func=lambda c: c.data == "myfiles")
def show_files(c):
    uid = c.from_user.id
    files = list_files(uid)
    if not files:
        text = "üìÅ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.\n–ó–∞–≥—Ä—É–∑–∏—Ç–µ .py, .js –∏–ª–∏ .zip —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é."
    else:
        text = "üìÅ –¢–≤–æ–∏ —Ñ–∞–π–ª—ã:"
    safe_edit_text(bot.edit_message_text, text, c.message.chat.id, c.message.id, reply_markup=files_kb(uid))

@bot.callback_query_handler(func=lambda c: c.data == "upload")
def ask_upload(c):
    uid = c.from_user.id
    u = get_user(uid)
    if u["frozen"]:
        bot.answer_callback_query(c.id, "üßä –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
        return
    
    info_text = (
        "üì§ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤</b>\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "‚Ä¢ üêç <code>.py</code> - Python —Å–∫—Ä–∏–ø—Ç—ã\n"
        "‚Ä¢ üìú <code>.js</code> - JavaScript —Å–∫—Ä–∏–ø—Ç—ã\n"
        "‚Ä¢ üì¶ <code>.zip</code> - –ê—Ä—Ö–∏–≤—ã —Å —Ñ–∞–π–ª–∞–º–∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:"
    )
    
    bot.answer_callback_query(c.id, "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ .py, .js –∏–ª–∏ .zip —Ñ–∞–π–ª")
    bot.send_message(c.message.chat.id, info_text, parse_mode="HTML")

@bot.callback_query_handler(func=lambda c: c.data == "buy")
def buy_plan(c):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    
    plans_text = (
        "üíé <b>–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã</b>\n\n"
        "ü™∂ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π</b>\n"
        "‚Ä¢ –§–∞–π–ª–æ–≤: 2\n"
        "‚Ä¢ RAM –Ω–∞ —Ñ–∞–π–ª: 512 MB | –°—É–º–º–∞—Ä–Ω–æ: 800 MB\n"
        "‚Ä¢ CPU –Ω–∞ —Ñ–∞–π–ª: 5% | –°—É–º–º–∞—Ä–Ω–æ: 8%\n"
        "‚Ä¢ –°—Ä–æ–∫: –±–µ—Å—Å—Ä–æ—á–Ω–æ\n\n"
        "üíé <b>–ü—Ä–µ–º–∏—É–º</b>\n"
        "‚Ä¢ –§–∞–π–ª–æ–≤: 20\n"
        "‚Ä¢ RAM –Ω–∞ —Ñ–∞–π–ª: 1024 MB | –°—É–º–º–∞—Ä–Ω–æ: 2048 MB\n"
        "‚Ä¢ CPU –Ω–∞ —Ñ–∞–π–ª: 15% | –°—É–º–º–∞—Ä–Ω–æ: 25%\n"
        "‚Ä¢ –°—Ä–æ–∫: –ø–æ –≤—ã–±–æ—Ä—É\n\n"
        "üöÄ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π</b>\n"
        "‚Ä¢ –§–∞–π–ª–æ–≤: 50\n"
        "‚Ä¢ RAM –Ω–∞ —Ñ–∞–π–ª: 2048 MB | –°—É–º–º–∞—Ä–Ω–æ: 4096 MB\n"
        "‚Ä¢ CPU –Ω–∞ —Ñ–∞–π–ª: 30% | –°—É–º–º–∞—Ä–Ω–æ: 50%\n"
        "‚Ä¢ –°—Ä–æ–∫: –ø–æ –≤—ã–±–æ—Ä—É\n\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å: @Arkadarootfurry"
    )
    
    bot.edit_message_text(plans_text, c.message.chat.id, c.message.id, reply_markup=kb, parse_mode="HTML")

@bot.callback_query_handler(func=lambda c: c.data == "speed")
def speed_test(c):
    bot.answer_callback_query(c.id, "‚ö° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
    
    results = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞
    try:
        import speedtest
        st = speedtest.Speedtest()
        st.get_best_server()
        ping_result = st.results.ping
        results.append(f"üì∂ –ü–∏–Ω–≥: <code>{ping_result:.1f} ms</code>")
    except ImportError:
        results.append("üì∂ –ü–∏–Ω–≥: <code>–ú–æ–¥—É–ª—å speedtest –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</code>")
    except Exception as e:
        results.append(f"üì∂ –ü–∏–Ω–≥: <code>–û—à–∏–±–∫–∞: {str(e)}</code>")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU
    try:
        import psutil
        cpu_percent = psutil.cpu_percent(interval=1)
        results.append(f"‚öôÔ∏è CPU: <code>{cpu_percent}%</code>")
    except ImportError:
        results.append("‚öôÔ∏è CPU: <code>–ú–æ–¥—É–ª—å psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</code>")
    except Exception as e:
        results.append(f"‚öôÔ∏è CPU: <code>–û—à–∏–±–∫–∞: {str(e)}</code>")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAM
    try:
        import psutil
        memory = psutil.virtual_memory()
        ram_used = memory.used / (1024 ** 3)  # –≤ GB
        ram_total = memory.total / (1024 ** 3)  # –≤ GB
        ram_percent = memory.percent
        results.append(f"üíæ RAM: <code>{ram_percent}% ({ram_used:.1f} GB / {ram_total:.1f} GB)</code>")
    except ImportError:
        results.append("üíæ RAM: <code>–ú–æ–¥—É–ª—å psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</code>")
    except Exception as e:
        results.append(f"üíæ RAM: <code>–û—à–∏–±–∫–∞: {str(e)}</code>")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
    try:
        import psutil
        disk = psutil.disk_usage('/')
        disk_used = disk.used / (1024 ** 3)  # –≤ GB
        disk_total = disk.total / (1024 ** 3)  # –≤ GB
        disk_percent = disk.percent
        results.append(f"üíΩ –î–∏—Å–∫: <code>{disk_percent}% ({disk_used:.1f} GB / {disk_total:.1f} GB)</code>")
    except ImportError:
        results.append("üíΩ –î–∏—Å–∫: <code>–ú–æ–¥—É–ª—å psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</code>")
    except Exception as e:
        results.append(f"üíΩ –î–∏—Å–∫: <code>–û—à–∏–±–∫–∞: {str(e)}</code>")
    
    # 5. –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Python
    try:
        import time
        start_time = time.time()
        # –ü—Ä–æ—Å—Ç–æ–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç
        for i in range(1000000):
            x = i * i
        python_speed = time.time() - start_time
        results.append(f"üêç Python —Ç–µ—Å—Ç: <code>{python_speed:.3f} —Å–µ–∫</code>")
    except Exception as e:
        results.append(f"üêç Python —Ç–µ—Å—Ç: <code>–û—à–∏–±–∫–∞: {str(e)}</code>")
    
    text = "‚ö° <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞:</b>\n" + "\n".join(results)
    bot.send_message(c.message.chat.id, text, parse_mode="HTML")

# ---------------- BACKGROUND MONITORING ----------------
def background_monitor():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    while True:
        try:
            resource_monitor.update_process_stats()
            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
            time.sleep(30)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
monitor_thread = threading.Thread(target=background_monitor, daemon=True)
monitor_thread.start()

# ---------------- RUN ----------------
if __name__ == "__main__":
    init_db()
    print("Bot started.")

    bot.infinity_polling(skip_pending=True)
